// auth - autorizations
import axios from 'axios';
import { axiosInstanceUser } from '../../axiosInstance';
import { createAsyncThunk } from '@reduxjs/toolkit';
import { notifyError, notifySuccess } from '../../hooks/notifications';
import {RootState} from '../store'


export const setAuthHeader = (accessToken: string | null) => {
  console.log("üîé Checking accessToken in setAuthHeader:", accessToken);
  
  if (!accessToken) {
    console.warn("‚ö†Ô∏è No access token provided. Authorization header NOT set.");
    return;
  }

  axiosInstanceUser.defaults.headers.common.Authorization = `Bearer ${accessToken}`;
  console.log("‚úÖ AUTH HEADER SET:", axiosInstanceUser.defaults.headers.common.Authorization);
};

// Utility to remove JWT - token
const clearAuthHeader = () => {
  delete axiosInstanceUser.defaults.headers.common["Authorization"];
};

export interface UserDataRes {
  name: string;
  email: string;
};
// –¢–∏–ø –¥–ª—è –¥–∞–Ω–∏—Ö –ª–æ–≥—ñ–Ω—É
interface AuthCredentials {
    email: string;
    password: string;
};

export interface AuthResponse {
data : {
  accessToken: string;
  user: {
    name: string;
    email: string;
  };}

}
// export interface AuthResponse {
//   accessToken: string;
//   user: {
//     name: string;
//     email: string;
//   };
// }
// –≤–∑—è–≤ —Å—é–¥–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç—ñ UsRegisterVelues (–ø—ñ–∑–Ω—ñ—à–µ —ñ–º–ø–æ—Ä—Ç—É—é –∑ —Ñ–æ—Ä–º–∏ —Ä–µ–≥—ñ—Å—Ç—Ä–∞—Ü—ñ—ó —ñ –ø—Ä–∏–±–µ—Ä—É)
export interface UsRegisterVelues {
    name: string;
    email: string;
    password: string;
  }
  
/*
 * POST @ /auth/register
 * body: { email, password } = userInfo
 */
// ThunkAPIConfig: –¢–∏–ø—ñ–∑–∞—Ü—ñ—è –¥–ª—è thunkAPI.–ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ { state: RootState }, —â–æ–± –º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ç–∏–ø—ñ–∑–æ–≤–∞–Ω–æ–≥–æ Redux —Å—Ç–∞–Ω—É.
export const register = createAsyncThunk<
 { status: number; data: AuthResponse }, // –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–∏–ø –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è   
    UsRegisterVelues,               // –¢–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, —è–∫—ñ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —É —Ñ—É–Ω–∫—Ü—ñ—é
    { rejectValue: string; state: RootState }  // –î–æ—Å—Ç—É–ø –¥–æ Redux —Å—Ç–∞–Ω—É —Ç–∞ –¢–∏–ø –ø–æ–º–∏–ª–∫–∏, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —É –≤–∏–ø–∞–¥–∫—É –Ω–µ–≤–¥–∞—á—ñ
  >('auth/register',
  async (userDataValues, thunkAPI) => {
    try {
      const response = await axiosInstanceUser.post<AuthResponse>('/auth/register', userDataValues, {
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
      });
      // After successful registration, add the token to the HTTP header
    notifySuccess('You Registers Succesfull !');

      console.log("REGISTER RESPONSE:", response.data); // –î–æ–¥–∞—Ç–∏ —Ü–µ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –ø—Ä–∏—Ö–æ–¥–µ —Ç–æ–∫–µ–Ω?
      setAuthHeader(response.data.data.accessToken);
      localStorage.setItem("token", response.data.data.accessToken);
      
       return { status: response.status, data: response.data }; // –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
          // return response.data;
        } catch (error: any) {
  const errorMessage = error.response?.data?.message || 'Error register!';
  // –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ –≤—ñ—Ç–ø–æ–≤—ñ–¥—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞ –≤ errorMessage
  return thunkAPI.rejectWithValue(errorMessage);
}
    }
);

/**
 * Get User Info
 * Just update local info about user
 * Not sure if it is needed at all
 */
export const getUser = createAsyncThunk('user/getUser', async (_, thunkAPI) => {
  try {
    const response = await axiosInstanceUser.get('/users');
    notifySuccess('You get on User Succesfull');
    return response.data;
  } catch (error: any) {
    if (error.response?.data?.data?.message)
      return thunkAPI.rejectWithValue(error.response.data.data.message);
  const errorMessage = error.response?.data?.message || 'Error get All User!';
  // –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ –≤—ñ—Ç–ø–æ–≤—ñ–¥—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞ –≤ errorMessage
  return thunkAPI.rejectWithValue(errorMessage);
  }
});

/*
 * POST @ /auth/login
 * body: { email, password } = userInfo
 */

export const logIn = createAsyncThunk<
   { status: number; data: AuthResponse }, // ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–∏–ø –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è                  
    AuthCredentials,               
    { rejectValue: string }        
>( "auth/login", async (userInfo, thunkAPI) => {
    try {
        const response = await axiosInstanceUser.post<AuthResponse>("/auth/login", userInfo);
        
        console.log("üîç API LOGIN RESPONSE:", response.data); 
        console.log("üîç API LOGIN TOKEN:", response.data?.data?.accessToken);

        if (!response.data || !response.data.data.accessToken) {
            console.error("‚ùå API response does not contain accessToken!");
            return thunkAPI.rejectWithValue("No accessToken in response");
        }

        // ‚úÖ –î–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω —É –∑–∞–≥–æ–ª–æ–≤–∫–∏ Axios
        setAuthHeader(response.data.data.accessToken);

        // ‚úÖ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–æ–∫–µ–Ω —É localStorage
        localStorage.setItem("jwt-token", response.data.data.accessToken);
        notifySuccess('You Login Succesfull');
        return { status: response.status, data: response.data }; // ‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è

    } catch (error: any) {
        console.error("‚ùå LOGIN ERROR:", error.response?.data || error.message);
        return thunkAPI.rejectWithValue("Error during login!");
    }
});


// export const logIn = createAsyncThunk<
//    { status: number; data: AuthResponse }, // –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–∏–ø –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è                 
//     AuthCredentials,               
//     { rejectValue: string }        
// >( 'auth/login',   async (userInfo, thunkAPI) => {
//         try {
//             const response = await axiosInstanceUser.post<AuthResponse>('/auth/login', userInfo);
//           // After successful login, add the token to the HTTP header
//           console.log("üîç API LOGIN RESPONSE:", response.data); // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î –±–µ–∫–µ–Ω–¥
//           console.log("üîç API LOGIN RESPONSE:", response.data.data.accessToken); // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î –±–µ–∫–µ–Ω–¥
//             setAuthHeader(response.data.data.accessToken);

//             // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –≤ localStorage
//             localStorage.setItem('token', response.data.data.accessToken);
//            if (!response.data || !response.data.data.accessToken) {
//         console.error("‚ùå API response does not contain accessToken!");
//         return thunkAPI.rejectWithValue("No accessToken in response");
//       }
          
//             return { status: response.status, data: response.data }; // –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
//         } catch (error) {
//             return thunkAPI.rejectWithValue("Error during login!");
//         }
//     }
// );

/*
 * POST @ /auth/logout
 * headers: Authorization: Bearer token
 */
export const logOut = createAsyncThunk<
    void,                          // –ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –ª–æ–≥–∞—É—Ç—É
    void,                          // –ù–µ–º–∞—î –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    { rejectValue: string }        // –¢–∏–ø –ø–æ–º–∏–ª–∫–∏
>('auth/logout', async (_, thunkAPI) => {
    try {
      await axiosInstanceUser.post('/auth/logout');
       notifySuccess('You Logout Succesfull');
        // After a successful logout, remove the token from the HTTP header
      clearAuthHeader();
      localStorage.removeItem('token');  // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ localStorage
    } catch (error) {
        return thunkAPI.rejectWithValue('Error logOut !');
    }
});


export interface UserRefreshToken {
  id: string;
  name: string;
  email: string;
  accessToken: string | null; // –¢–æ–∫–µ–Ω –º–æ–∂–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –≤ –¥–µ—è–∫–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö
}


// —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–∏—Å—Ç–∞ –Ω–∞ –ø–æ—à—Ç—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –≤–ª–∞—Å–Ω–∏–π –±–µ–∫–µ–Ω–¥)
interface ResetEmailResponse {
  email: string;
}

export const sendResetEmail = createAsyncThunk<ResetEmailResponse, string>(
  "auth/sendResetEmail",
  // 'user/sendResetEmail',
  async (email, { rejectWithValue }) => {
    try {
      const response = await axiosInstanceUser.post("/auth/send-reset-email", { email });
      notifySuccess('Send Reset Email on you email Succesfull');
      return response.data;
    } catch (error: any) {
      return rejectWithValue(error.response?.data || "Error sending email");
    }
  }
);

/**
 * Send Reset Password Email
 * User gets link to the Password Reset page with reset token
 */
// export const sendResetPasswordEmail = createAsyncThunk(
//   'user/send-reset-email',
//   async (email, thunkAPI) => {
//     try {
//       const { data } = await authAPI.post('/auth/send-reset-email', email);
//       notifySuccess('Password reset email sent');
//       return data;
//     } catch (error) {
//       if (error.response?.data?.data?.message)
//         return thunkAPI.rejectWithValue(error.response.data.data.message);
//       notifyError('Password reset email was not sent');
//       return thunkAPI.rejectWithValue(error.message);
//     }
//   },
// );

// —Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ—Å–µ—Ç –ø–∞—Ä–æ–ª—è –¥–ª—è —Å–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è —Ç–∞ —É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –≤–ª–∞—Å–Ω–∏–π –±–µ–∫–µ–Ω–¥)
export const resetPassword = createAsyncThunk<
  { message: string }, // –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  { newPassword: string; token: string }, // –í—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
  { rejectValue: string } // –ü–æ–º–∏–ª–∫–∞
>(
  "auth/resetPassword",
  // 'user/reset-pwd',
  async ({ newPassword, token }, { rejectWithValue }) => {
    try {
      const response = await axiosInstanceUser.post("/auth/reset-pwd", { newPassword, token });
      notifySuccess('Reset on you password Succesfull');
      return response.data;
    } catch (error: any) {
      return rejectWithValue(error.response?.data || "Error resetting password");
    }
  }
);


export const refreshUser = createAsyncThunk<
  UserRefreshToken, void, { state: RootState; rejectValue: string }>(
  "auth/refresh",
  async (_, { getState, rejectWithValue }) => {
   
    try {
      const accessToken = getState().auth.accessToken;
    console.log("üîç REFRESH TOKEN BEFORE REQUEST:", accessToken); // ‚úÖ –î–æ–¥–∞–Ω–æ –ª–æ–≥
    if (!accessToken) {
      return rejectWithValue("No access token found");
    }
      setAuthHeader(accessToken);
      notifySuccess('Refresh of token Succesfull');
      const response = await axiosInstanceUser.get<UserRefreshToken>("/auth/refresh");

      console.log("üü¢ User data from refresh:", response.data);

      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
      localStorage.setItem("jwt-token", response.data.accessToken || "");

      return response.data;
    } catch (error: any) {
      if (error.response?.status === 401) {
        console.error("‚ùå Unauthorized, logging out...");
        return rejectWithValue("Unauthorized");
      }
      return rejectWithValue("Error refreshing user");
    }
  }
);

/**
 * Confirm Email
 * User is now active and can log in with his password
 */
interface ConfirmEmailPayload {
  accessToken: string | null; 
}

export const confirmEmail = createAsyncThunk<
  ConfirmEmailPayload,  // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
  { token: string }      // ‚úÖ –û—á—ñ–∫—É—î–º–æ –æ–±'—î–∫—Ç –∑ `token`
>(
  'user/confirm-email',
  async ({ token }, thunkAPI) => {
    try {
      const response = await axiosInstanceUser.post('/auth/confirm-email', { token });
      console.log(response);
      setAuthHeader(response.data.data.accessToken);
      notifySuccess('Email confirmed');
      return response.data;
    } catch (error: any) {
      console.log(error);
      if (error.response?.data?.data?.message)
        return thunkAPI.rejectWithValue(error.response.data.data.message);
      const errorMessage = error.response?.data?.message || 'Email has not been confirmed';
  // –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ –≤—ñ—Ç–ø–æ–≤—ñ–¥—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞ –≤ errorMessage
      return thunkAPI.rejectWithValue(errorMessage);
    }
  },
);

/**
 * Google auth: get OAuth URL
 */
export const getOauthUrl = createAsyncThunk(
  'user/get-oauth-url',
  async (_, thunkAPI) => {
    try {
      const { data } = await axiosInstanceUser.get('/auth/get-oauth-url');
      return data;
    } catch (error: any) {
      if (error.response?.data?.data?.message)
        return thunkAPI.rejectWithValue(error.response.data.data.message);
      notifyError('Oauth url failed');
      return thunkAPI.rejectWithValue(error.message);
    }
  },
);

/**
 * Refresh Session = refreshUser
 * User gets new accessToken
 */

export interface UserRefreshSessionToken {
  accessToken: string | null; // –¢–æ–∫–µ–Ω –º–æ–∂–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –≤ –¥–µ—è–∫–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö
}

export const refreshSessionUser = createAsyncThunk<
  UserRefreshSessionToken, // üîπ –ú–æ–∂–µ—à –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ç–æ—á–Ω–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î API
  void,
  { state: RootState; rejectValue: string } // üîπ –î–æ–¥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –¥–ª—è `getState()`
  >(
  'user/refresh-session',
  async (_, thunkAPI) => {
    try {
      const response = await axiosInstanceUser.post<UserRefreshSessionToken>('/auth/refresh');
      setAuthHeader(response.data.accessToken);
      return response.data;
    } catch (error: any) {
      return thunkAPI.rejectWithValue(error.message);
    }
  },
  {
    condition: (_, thunkAPI) => {
      const reduxState = thunkAPI.getState() as RootState; // üîπ –í–∫–∞–∑—É—î–º–æ RootState
      return reduxState.auth.accessToken !== null;
    },
  },
);

/**
 * Google auth: confirm user and get authToken
 */
export const confirmOauth = createAsyncThunk<
  UserRefreshSessionToken, 
  string,
  { state: RootState; rejectValue: string }
  >(
  'user/confirm-oauth',
  async (code, thunkAPI) => {
    try {
      const response = await axiosInstanceUser.post<UserRefreshSessionToken>('/auth/confirm-oauth', {code});
      setAuthHeader(response.data.accessToken);
      return response.data;
    } catch (error: any) {
      if (error.response?.data?.data?.message)
        return thunkAPI.rejectWithValue(error.response.data.data.message);
      const errorMessage = error.response?.data?.message || 'Oauth confirm failed';
  
      // –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ –≤—ñ—Ç–ø–æ–≤—ñ–¥—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞ –≤ errorMessage
     notifyError('confirmOauth url Error failed');
      return thunkAPI.rejectWithValue(errorMessage);
    }
  },
);

