// auth - autorizations
import axios from 'axios';
import { axiosInstanceUser } from '../../axiosInstance';
import { createAsyncThunk } from '@reduxjs/toolkit';
import {RootState} from '../store'

// —Ü–µ —Ç–æ–∫–µ–Ω—ñ —è–∫—ñ —è –¥–∞–ª—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é:
// const accessToken = response.data.accessToken; - –∫–æ—Ä–æ—Ç–∫–æ–∂–∏–≤—É—á–∏–π - 15—Ö–≤
// const token = response.data.refreshToken; - –¥–æ–≤–≥–æ–∂–∏–≤—É—á–∏–π  - 30–¥–Ω

// localStorage.setItem("accessToken", accessToken);
// localStorage.setItem("token", token);


// axios.defaults.headers.common["Authorization"] = `Bearer ${accessToken}`;

// Utility to add JWT - (token)
// const setAuthHeader = (token: string | null) => {
//     axiosInstanceUser.defaults.headers.common.Authorization = `Bearer ${token}`;
// };
export const setAuthHeader = (accessToken: string | null) => {
  console.log("üîé Checking accessToken in setAuthHeader:", accessToken);
  
  if (!accessToken) {
    console.warn("‚ö†Ô∏è No access token provided. Authorization header NOT set.");
    return;
  }

  axiosInstanceUser.defaults.headers.common.Authorization = `Bearer ${accessToken}`;
  console.log("‚úÖ AUTH HEADER SET:", axiosInstanceUser.defaults.headers.common.Authorization);
};

// Utility to remove JWT - token
const clearAuthHeader = () => {
  delete axiosInstanceUser.defaults.headers.common["Authorization"];
};

export interface UserDataRes {
  name: string;
  email: string;
};
// –¢–∏–ø –¥–ª—è –¥–∞–Ω–∏—Ö –ª–æ–≥—ñ–Ω—É
interface AuthCredentials {
    email: string;
    password: string;
};

export interface AuthResponse {
data : {
  accessToken: string;
  user: {
    name: string;
    email: string;
  };}

}
// export interface AuthResponse {
//   accessToken: string;
//   user: {
//     name: string;
//     email: string;
//   };
// }
// –≤–∑—è–≤ —Å—é–¥–∞ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç—ñ UsRegisterVelues (–ø—ñ–∑–Ω—ñ—à–µ —ñ–º–ø–æ—Ä—Ç—É—é –∑ —Ñ–æ—Ä–º–∏ —Ä–µ–≥—ñ—Å—Ç—Ä–∞—Ü—ñ—ó —ñ –ø—Ä–∏–±–µ—Ä—É)
export interface UsRegisterVelues {
    name: string;
    email: string;
    password: string;
  }
  

// ThunkAPIConfig: –¢–∏–ø—ñ–∑–∞—Ü—ñ—è –¥–ª—è thunkAPI.–ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ { state: RootState }, —â–æ–± –º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ç–∏–ø—ñ–∑–æ–≤–∞–Ω–æ–≥–æ Redux —Å—Ç–∞–Ω—É.
export const register = createAsyncThunk<
 { status: number; data: AuthResponse }, // –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–∏–ø –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è   
    UsRegisterVelues,               // –¢–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, —è–∫—ñ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —É —Ñ—É–Ω–∫—Ü—ñ—é
    { rejectValue: string; state: RootState }  // –î–æ—Å—Ç—É–ø –¥–æ Redux —Å—Ç–∞–Ω—É —Ç–∞ –¢–∏–ø –ø–æ–º–∏–ª–∫–∏, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è —É –≤–∏–ø–∞–¥–∫—É –Ω–µ–≤–¥–∞—á—ñ
  >('auth/register',
  async (userDataValues, thunkAPI) => {
    try {
      const response = await axiosInstanceUser.post<AuthResponse>('/auth/register', userDataValues, {
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
      });
      // After successful registration, add the token to the HTTP header
      // const token = response.data?.token ?? response.data?.data?.token;
      //  console.log("üì© REGISTER RESPONSE:", response);

      // if (!response.data.accessToken) {
      //   console.warn("‚ö†Ô∏è REGISTER RESPONSE DOES NOT CONTAIN accessToken!", response.data);
      // }

      console.log("REGISTER RESPONSE:", response.data); // –î–æ–¥–∞—Ç–∏ —Ü–µ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –ø—Ä–∏—Ö–æ–¥–µ —Ç–æ–∫–µ–Ω?
      setAuthHeader(response.data.data.accessToken);
      localStorage.setItem("token", response.data.data.accessToken);
      
       return { status: response.status, data: response.data }; // –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
          // return response.data;
        } catch (error: any) {
  const errorMessage = error.response?.data?.message || 'Error register!';
  // –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ –≤—ñ—Ç–ø–æ–≤—ñ–¥—ñ –∑ —Å–µ—Ä–≤–µ—Ä–∞ –≤ errorMessage
  return thunkAPI.rejectWithValue(errorMessage);
}
    }
);

/*
 * POST @ /users/login
 * body: { email, password } = userInfo
 */
export const logIn = createAsyncThunk<
   { status: number; data: AuthResponse }, // –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–∏–ø –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è                 
    AuthCredentials,               
    { rejectValue: string }        
>( 'auth/login',   async (userInfo, thunkAPI) => {
        try {
            const response = await axiosInstanceUser.post<AuthResponse>('/auth/login', userInfo);
         // After successful login, add the token to the HTTP header
            setAuthHeader(response.data.data.accessToken);

            // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –≤ localStorage
            localStorage.setItem('token', response.data.data.accessToken);

          

            return { status: response.status, data: response.data }; // –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        } catch (error) {
            return thunkAPI.rejectWithValue("Error during login!");
        }
    }
);

/*
 * POST @ /users/logout
 * headers: Authorization: Bearer token
 */
export const logOut = createAsyncThunk<
    void,                          // –ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è –ª–æ–≥–∞—É—Ç—É
    void,                          // –ù–µ–º–∞—î –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    { rejectValue: string }        // –¢–∏–ø –ø–æ–º–∏–ª–∫–∏
>('auth/logout', async (_, thunkAPI) => {
    try {
        await axiosInstanceUser.post('/auth/logout');
        // After a successful logout, remove the token from the HTTP header
      clearAuthHeader();
      localStorage.removeItem('token');  // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ localStorage
    } catch (error) {
        return thunkAPI.rejectWithValue('Error logOut !');
    }
});


export interface UserRefreshToken {
  id: string;
  name: string;
  email: string;
  accessToken: string | null; // –¢–æ–∫–µ–Ω –º–æ–∂–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –≤ –¥–µ—è–∫–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö
}


// —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ª–∏—Å—Ç–∞ –Ω–∞ –ø–æ—à—Ç—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –≤–ª–∞—Å–Ω–∏–π –±–µ–∫–µ–Ω–¥)
interface ResetEmailResponse {
  email: string;
}

export const sendResetEmail = createAsyncThunk<ResetEmailResponse, string>(
  "auth/sendResetEmail",
  async (email, { rejectWithValue }) => {
    try {
      const response = await axiosInstanceUser.post("/auth/send-reset-email", { email });
      return response.data;
    } catch (error: any) {
      return rejectWithValue(error.response?.data || "Error sending email");
    }
  }
);

// —Ñ—É–Ω–∫—Ü—ñ—è —Ä–µ—Å–µ—Ç –ø–∞—Ä–æ–ª—è –¥–ª—è —Å–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è —Ç–∞ —É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –≤–ª–∞—Å–Ω–∏–π –±–µ–∫–µ–Ω–¥)
export const resetPassword = createAsyncThunk<
  { message: string }, // –û—á—ñ–∫—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  { newPassword: string; token: string }, // –í—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
  { rejectValue: string } // –ü–æ–º–∏–ª–∫–∞
>(
  "auth/resetPassword",
  async ({ newPassword, token }, { rejectWithValue }) => {
    try {
      const response = await axiosInstanceUser.post("/auth/reset-pwd", { newPassword, token });
      return response.data;
    } catch (error: any) {
      return rejectWithValue(error.response?.data || "Error resetting password");
    }
  }
);

export const refreshUser = createAsyncThunk<UserRefreshToken, void, { state: RootState; rejectValue: string }>(
  "auth/refresh",
  async (_, { getState, rejectWithValue }) => {
    try {
      const state = getState();
      const token = state.auth.accessToken;

      if (!token) {
        return rejectWithValue("No token found");
      }

      setAuthHeader(token);
      const response = await axiosInstanceUser.get<UserRefreshToken>("/auth/refresh");

      console.log("üü¢ User data from refresh:", response.data);

      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
      localStorage.setItem("jwt-token", response.data.accessToken || "");

      return response.data;
    } catch (error: any) {
      if (error.response?.status === 401) {
        console.error("‚ùå Unauthorized, logging out...");
        return rejectWithValue("Unauthorized");
      }
      return rejectWithValue("Error refreshing user");
    }
  }
);


// export const refreshUser = createAsyncThunk<UserRefreshToken, void, { state: RootState; rejectValue: string }>(
//   "auth/refresh",
//   async (_, { getState, rejectWithValue }) => {
//     try {
//       const state = getState();
//       const token = state.auth.accessToken;

//       if (!token) {
//         return rejectWithValue("No token found");
//       }

//       setAuthHeader(token); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ `axiosInstanceUser`
//       const response = await axiosInstanceUser.get<UserRefreshToken>("/auth/current");

//       console.log("User data from refresh:", response.data);
//        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–æ–∫–µ–Ω localStorage
//       localStorage.setItem("token", response.data.accessToken || ""); //–î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É
//       return response.data;
//     } catch (error: any) {
//       if (error.response?.status === 401) {
//         console.error("Unauthorized, logging out...");
//         return rejectWithValue("Unauthorized");
//       }
//       return rejectWithValue("Error refreshing user");
//     }
//   }
// );


export default axios;
// –Ω–æ–≤–∞ –≤–µ—Ä—Å—ñ—è —â–æ–± –±—Ä–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ –ª–æ–∫–∞–ª—Å—Ç–æ—Ä–µ–¥–∂:
// export const refreshUser = createAsyncThunk<
//   UserRefreshToken,
//   void,
//   { state: RootState }
// >(
//   "auth/refresh",
//   async (_, thunkAPI) => {
//     const token = localStorage.getItem('token');  // –¢–æ–∫–µ–Ω –∑ localStorage

//     if (!token) {
//       console.log('No token found in localStorage');
//       return thunkAPI.rejectWithValue("No token found");
//     }

//     setAuthHeader(token);
//     console.log('Token set in refreshUser:', axios.defaults.headers.common.Authorization);

//     try {
//       const response = await axiosInstanceUser.get<UserRefreshToken>("/users/current");
//       console.log('User data from refresh:', response.data);
//       return response.data;
//     } catch (error) {
//       console.error('Error refreshing user:', error);
//       return thunkAPI.rejectWithValue('Error refreshing user');
//     }
//   }
// );

// export default axios;


// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (refresh)
// export const refreshUsers = () => async (dispatch, getState: () => RootState) => {
//   dispatch(setRefreshing(true));

//   try {
//     const state = getState();
//     const token = state.auth.token;

//     if (!token) {
//       dispatch(logOut());
//       return;
//     }

//     axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
//     const { data } = await axios.get('/users/current'); // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —é–∑–µ—Ä–∞

//     dispatch(updateUser(data));
//     dispatch(setRefreshing(false));
//   } catch (error: any) {
//     console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error.response?.status);

//     if (error.response?.status === 401) {
//       dispatch(logOut());
//     }

//     dispatch(setRefreshing(false));
//   }
// };

//  –¢–∏–ø—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ (User) —ñ —Å—Ç–∞–Ω—É Redux (RootState)
  // createAsyncThunk<ReturnedType, ThunkArg, ThunkAPIConfig>
 
// –ø–æ—è—Å–Ω–µ–Ω–Ω—è —Ç–∏–ø—ñ–∑–∞—Ü—ñ—ó—ó –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —è–∫—ñ –¥–æ–¥–∞—é –¥–æ createAsyncThunk<> : createAsyncThunk<ReturnedType, ThunkArg, ThunkAPIConfig>
// ReturnedType: –¢–∏–ø, —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É. –£ –Ω–∞—à–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ü–µ User.
// ThunkArg: –ê—Ä–≥—É–º–µ–Ω—Ç–∏, —è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–π–º–∞—î –ø—ñ–¥ —á–∞—Å –≤–∏–∫–ª–∏–∫—É. –ú–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, —Ç–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ void.
// ThunkAPIConfig: –¢–∏–ø—ñ–∑–∞—Ü—ñ—è –¥–ª—è thunkAPI.–ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ { state: RootState }, —â–æ–± –º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Ç–∏–ø—ñ–∑–æ–≤–∞–Ω–æ–≥–æ Redux —Å—Ç–∞–Ω—É.

// –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ —Ä–µ–≥—ñ—Ç—Ä–∞—Ü—ñ—ó –≤ –ü–û–°–¢–ú–ï–ù –±–µ–∫–µ–Ω–¥ –ø—Ä–∞—Ü—é—î —ñ –ø—Ä–∏—Ö–æ–¥–µ —Ç–∞–∫–∏–π –æ–±—î–∫—Ç –≤—ñ—Ç–ø–æ–≤—ñ–¥—ñ :
// {
//     "user": {
//         "name": "Joni Li",
//         "email": "joni1978aleks@gmail.com"
//     },
//     "token": "eyJhbGciOiJIUzI"
// }

// // this obgect correct Login end Refresh:
// email
// :
// "4725NilaAleks@gmail.com"
// name
// :
// "AleksandrNIsa"
// password
// :
// "4725NilaAlex789"

// //  –æ–±—î–∫—Ç –≤—ñ—Ä–Ω–æ—ó –≤—ñ—Ç–ø–æ–≤—ñ–¥—ñ –ø—Ä–∏ —Ä–µ–≥—ñ—Å—Ç—Ä–∞—Ü—ñ—ó—ó: {

//     "user": {
//         "name": "Joni Alex",
//         "email": "1litvgo1978aleks@gmail.com"
//     },
//     "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2I0N2NjMGM0OTVlZDZlMjVmM2RmN2EiLCJpYXQiOjE3Mzk4ODE2NjR9.WXm6lNGEUIlARAtR08FqkTlseC_RnqBGNX6TYE5kObk"
// }

// // –æ–±—î–∫—Ç –≤—ñ—Ç–ø–æ–≤—ñ–¥—ñ —Å –ü–û–°–¢–ú–ê–ù –Ω–∞ –∑–∞—Ä–∞–∑ –ø—Ä–∏ –õ–æ–≥—ñ–Ω—ñ
// {
//     "status": 200,
//     "message": "Successfully logged in an user!",
//     "data": {
//         "accessToken": "u9t2bah2t2VCNks2NiBmktzzZxPK4ZmLEtI6GVnw"
//     }
// }
// –ü—Ä–∏–∫–ª–∞–¥ —è–∫ —è –º–∞.—é –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ 2 —Ç–æ–∫–µ–Ω–∞ –≤ –≤—ñ—Ç–ø–æ–≤—ñ–¥—è—Ö –ø—Ä–∏ 201 —Ç–∞ 200
//  "user": {
//         "name": "Joni Alex",
//         "email": "1litvgo1978aleks@gmail.com"
//     },
// "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2N2I0N2NjMGM0OTVlZDZlMjVmM2RmN2EiLCJpYXQiOjE3Mzk4ODE2NjR9.WXm6lNGEUIlARAtR08FqkTlseC_RnqBGNX6TYE5kObk",
//       "data": {
//         "accessToken": "u9t2bah2t2VCNks2NiBmktzzZxPK4ZmLEtI6GVnw"
//     }
// }

// –¶–µ –ø—Ä–∏–∫–ª–∞–¥ —è–∫ –º–∞—é –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏ –†–µ–≥—ñ—Å—Ç—Ä:
// {
//     "status": 201,
//     "message": "Successfully registered a user!",
//     "data": {
//         "user": {
//             "name": "Joni Alex",
//             "email": "1litvgo1978aleks@gmail.com"
//         },
//         "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
//         "token": "u9t2bah2t2VCNks2NiBmktzzZxPK4ZmLEtI6GVnw"
//     }
// }

// –¶–µ –ø—Ä–∏–∫–ª–∞–¥ –≤—ñ–¥ –ñ–ü–¢ —è–∫ —è –º–∞—é –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏ –õ–û–ì–Ü–ù–Ü: 
// {
//     "status": 200,
//     "message": "Successfully logged in an user!",
//     "data": {
//         "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
//         "token": "u9t2bah2t2VCNks2NiBmktzzZxPK4ZmLEtI6GVnw"
//     }
// }
