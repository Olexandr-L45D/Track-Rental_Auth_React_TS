import { createSlice, isAnyOf, PayloadAction } from "@reduxjs/toolkit";
import { register, logIn, logOut, refreshUser, UserRefreshToken, AuthResponse, resetPassword, sendResetEmail } from "./operations";

export interface User {
  id?: string; // id –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π
  name: string;
  email: string;
}

export interface AuthState {
  user: User | null;
  token: string | null;
  isLoggedIn: boolean;
  isRefreshing: boolean;
  isError: boolean | string;
  isLoading: boolean;
}

const initialState: AuthState = {
  user: null,
  token: null,
  isLoggedIn: false,
  isRefreshing: false,
  isError: false,
  isLoading: false,
};


const authSlice = createSlice({
  name: "auth",
  initialState,
   reducers: {
    loginSuccess: (state: AuthState, action: PayloadAction<{ token: string; user: User }>) => { 
      console.log("üü¢ LOGIN SUCCESS REDUCER TRIGGERED", action.payload);
      state.token = action.payload.token;
      state.isLoggedIn = true;
      state.user = action.payload.user;
    },
  },// –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±'—î–∫—Ç reducers - –æ–±–æ–≤—å—è–∑–∫–æ–≤–µ!
  extraReducers: (builder) => {
    builder
        .addCase(register.fulfilled, (state, action: PayloadAction<{ status: number; data: AuthResponse }>) => {
  console.log("REGISTER SUCCESS:", action.payload);
  console.log("TOKEN RECEIVED:", action.payload.data.token);

  state.user = {
    name: action.payload.data.user.name,
    email: action.payload.data.user.email,
  };
  state.token = action.payload.data.token;
  localStorage.setItem('token', action.payload.data.token);
  state.isLoggedIn = true;
  state.isLoading = false;
})
.addCase(logIn.fulfilled, (state, action: PayloadAction<{ status: number; data: AuthResponse }>) => {
  console.log("LOGIN SUCCESS:", action.payload);
  console.log("TOKEN RECEIVED:", action.payload.data.token);

  state.user = {
    name: action.payload.data.user.name,
    email: action.payload.data.user.email,
  };
  state.token = action.payload.data.token;
  localStorage.setItem('token', action.payload.data.token);

  state.isLoggedIn = true;
  state.isLoading = false;
})
      .addCase(logOut.fulfilled, () => initialState)
      .addCase(refreshUser.pending, (state) => {
        state.isRefreshing = true;
      })
      .addCase(refreshUser.fulfilled, (state, action: PayloadAction<UserRefreshToken>) => {
  console.log("REFRESH SUCCESS:", action.payload);
  state.user = {
    id: action.payload.id,
    name: action.payload.name,
    email: action.payload.email,
        };

    //     if (!action.payload.data.token) {
    // console.warn("Token not received, attempting to log in...");
    // await dispatch(logIn({ email: action.payload.data.user.email, password: userDataValues.password }));
    // return;
    //    }
  state.token = action.payload.token; // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –∑–º—ñ–Ω–∏–≤—Å—è
  localStorage.setItem("token", action.payload.token || "");
  state.isRefreshing = false;
  state.isLoggedIn = true;
})
      .addCase(refreshUser.rejected, (state) => {
        state.isRefreshing = false;
        state.isLoggedIn = false;
      })
      // **–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è (–Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç–∞)**
      .addCase(sendResetEmail.pending, (state) => {
        state.isLoading = true;
        state.isError = false;
      })
      .addCase(sendResetEmail.fulfilled, (state) => {
        state.isLoading = false;
      })
      .addCase(sendResetEmail.rejected, (state, action) => {
        state.isLoading = false;
        state.isError = action.payload as string;
      })

      // **–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è (–∑–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω)**
      .addCase(resetPassword.pending, (state) => {
        state.isLoading = true;
        state.isError = false;
      })
      .addCase(resetPassword.fulfilled, (state) => {
        state.isLoading = false;
      })
      .addCase(resetPassword.rejected, (state, action) => {
        state.isLoading = false;
        state.isError = action.payload as string;
      })
      .addMatcher(isAnyOf(register.pending, logIn.pending), (state) => {
        state.isLoading = true;
      })
      .addMatcher(isAnyOf(register.rejected, logIn.rejected), (state, action: PayloadAction<unknown>) => {
        console.log("LOGIN ERROR:", action.payload); // –î–û–î–ê—é –õ–û–ì —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —á–∏ —á–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–º–∏–ª–∫–∞ –∑ unwrap()
        state.isLoading = false;
         state.isLoggedIn = false; // –û–ë–û–í'–Ø–ó–ö–û–í–û! –©–æ–± –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑—á–∏—Ç—É–≤–∞–ª–æ—Å—è –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ
        state.isError = typeof action.payload === "string" ? action.payload : "Unknown error";
      });
  },
});

export const { loginSuccess } = authSlice.actions;
export const authReducer = authSlice.reducer;
export default authSlice.reducer;


// –û—Å–∫—ñ–ª—å–∫–∏ —É —Ñ–∞–π–ª—ñ axiosInstance.ts —Ç–∏ —ñ–º–ø–æ—Ä—Ç—É—î—à store, –∞ —É store.ts 
// –π–º–æ–≤—ñ—Ä–Ω–æ —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è authSlice.ts, –¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è register, —Ü–µ –º–æ–∂–µ –ø—Ä–∏–∑–≤–æ–¥–∏—Ç–∏ –¥–æ –ø—Ä–æ–±–ª–µ–º–∏.
// –¶–∏–∫–ª –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫:
// store.ts —ñ–º–ø–æ—Ä—Ç—É—î authSlice.ts
// authSlice.ts —ñ–º–ø–æ—Ä—Ç—É—î operations.ts
// operations.ts —ñ–º–ø–æ—Ä—Ç—É—î axiosInstance.ts
// axiosInstance.ts —ñ–º–ø–æ—Ä—Ç—É—î store.ts ‚Üí —Ü–∏–∫–ª—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç!
// –¶–µ –º–æ–∂–µ —Å–ø—Ä–∏—á–∏–Ω–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É, –∫–æ–ª–∏ register —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π.