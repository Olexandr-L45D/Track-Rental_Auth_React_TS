import { createSlice, isAnyOf, PayloadAction } from "@reduxjs/toolkit";
import { register, logIn, logOut, refreshUser, UserRefreshToken,  resetPassword, sendResetEmail, setAuthHeader } from "./operations";

export interface AuthResponse {
  data: {
  accessToken: string;
  user: {
    name: string;
    email: string;
  };}
}

export interface User {
  id?: string; // id –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π
  name: string;
  email: string;
}


export interface AuthState {
  user?: User | null;
  token: string | null;
  accessToken: string | null;
  isLoggedIn: boolean;
  isRefreshing: boolean;
  isError: boolean | string;
  isLoading: boolean;
}

const initialState: AuthState = {
  user: null,
  token: null,
  accessToken: null,
  isLoggedIn: false,
  isRefreshing: false,
  isError: false,
  isLoading: false,
};


const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    loginSuccess: (state: AuthState, action: PayloadAction<{ accessToken: string; user: User }>) => {
      console.log("üü¢ LOGIN SUCCESS REDUCER TRIGGERED", action.payload);

      state.accessToken = action.payload.accessToken;
      state.isLoggedIn = true;
      state.user = action.payload.user;

      // üîπ –ó–∞–ø–∏—Å—É—î–º–æ –≤ LocalStorage
      localStorage.setItem("jwt-token", action.payload.accessToken);
      console.log("‚úÖ Token set in Redux & LocalStorage:", state.accessToken);
    },
    setToken: (state, action: PayloadAction<{ accessToken: string; user?: User | null }>) => {
  console.log("üîÑ setToken action received:", action.payload);
  
  if (action.payload.accessToken) {
    state.accessToken = action.payload.accessToken;
    state.isLoggedIn = true; // ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ isLoggedIn
    console.log("‚úÖ New accessToken in Redux state:", state.accessToken);
    console.log("‚úÖ isLoggedIn SET TO TRUE in Redux");
  } else {
    console.warn("‚ö†Ô∏è No accessToken provided in setToken!");
  }

  if (action.payload.user) {
    state.user = action.payload.user;
  } else {
    state.user = null;
  }
},

    // setToken: (state: AuthState, action: PayloadAction<{ accessToken: string; user?: User | null }>) => {
      
    //   state.isLoggedIn = !!action.payload.accessToken;
    //   console.log("üîÑ setToken action received:", action.payload);
    //   state.accessToken = action.payload.accessToken;
    //   console.log("‚úÖ New accessToken in Redux state:", state.accessToken);
    //   if (action.payload.user) {
    //     state.user = action.payload.user;
    //   } else {
    // state.user = null; //  –û—á–∏—â—É—î–º–æ —é–∑–µ—Ä–∞, —è–∫—â–æ –Ω–µ–º–∞—î
    // }
      
    // },
    logOut: (state) => {
  state.accessToken = null;
  state.isLoggedIn = false;  // ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π
  state.user = null; 
  localStorage.removeItem("jwt-token"); // ‚úÖ –í–∏–¥–∞–ª—è—î–º–æ —Ç–æ–∫–µ–Ω –∑ localStorage
   },
  },
  extraReducers: (builder) => {
    builder
      .addCase(register.fulfilled, (state, action: PayloadAction<{ status: number; data: AuthResponse }>) => {
        console.log("REGISTER SUCCESS:", action.payload);
     console.log("üü¢ Expected `accessToken`:", action.payload?.data?.data?.accessToken);
     
        state.user = {
          name: action.payload.data.data.user.name,
          email: action.payload.data.data.user.email,
        };

    const accessToken = action.payload?.data?.data?.accessToken;

  if (accessToken) {
    state.accessToken = action.payload.data.data.accessToken;
    localStorage.setItem("jwt-token", action.payload.data.data.accessToken);

    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –≤—Å—ñ—Ö –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
    setAuthHeader(action.payload.data.data.accessToken);
  } else {
    console.warn("‚ö†Ô∏è Register response does not contain accessToken!");
  }
        state.isLoggedIn = true;
        state.isLoading = false;
      })
      .addCase(logIn.fulfilled, (state, action: PayloadAction<{ status: number; data: AuthResponse }>) => {
           console.log("TOKEN RECEIVED.Data:", action.payload.data?.data?.accessToken);

        state.user = {
          name: action.payload.data.data.user.name,
          email: action.payload.data.data.user.email,
        };

         console.log("üîÑ LOG IN SUCCESS: Action payload received", action.payload);
    
    const receivedToken = action.payload.data?.data?.accessToken;
    console.log("üì• Received accessToken:", receivedToken);
    
    if (receivedToken) {
        state.accessToken = receivedToken;
        console.log("‚úÖ Token successfully saved to Redux:", state.accessToken);
    } else {
        console.warn("‚ö†Ô∏è No accessToken in response!");
    }

  if (action.payload.data?.data?.accessToken) {
    state.accessToken = action.payload.data.data.accessToken;
    state.isLoggedIn = true;  // ‚úÖ –ú–∞—î —Å—Ç–∞—Ç–∏ true!
    localStorage.setItem("jwt-token", action.payload.data.data.accessToken);
    setAuthHeader(action.payload.data.data.accessToken);
  } else {
    console.warn("‚ùå No accessToken in payload!");
    return;
  }

        state.isLoggedIn = true;
        state.isLoading = false;
      })
      .addCase(logOut.fulfilled, () => initialState)
      .addCase(refreshUser.pending, (state) => {
        state.isRefreshing = true;
      })
        .addCase(refreshUser.fulfilled, (state, action: PayloadAction<UserRefreshToken>) => {
     console.log("üü¢ REFRESH SUCCESS:", action.payload);

    state.user = {
    id: action.payload.id,
    name: action.payload.name,
    email: action.payload.email,
     };

     if (action.payload.accessToken) {
    state.accessToken = action.payload.accessToken; // üî• –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω –≤ Redux
    localStorage.setItem("jwt-token", action.payload.accessToken);
    } else {
    console.warn("‚ö†Ô∏è Refresh response does not contain accessToken!");
    }

    state.isRefreshing = false;
    state.isLoggedIn = true;
     })

      .addCase(refreshUser.rejected, (state) => {
        state.isRefreshing = false;
        state.isLoggedIn = false;
      })
      // **–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è (–Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç–∞)**
      .addCase(sendResetEmail.pending, (state) => {
        state.isLoading = true;
        state.isError = false;
      })
      .addCase(sendResetEmail.fulfilled, (state) => {
        state.isLoading = false;
      })
      .addCase(sendResetEmail.rejected, (state, action) => {
        state.isLoading = false;
        state.isError = action.payload as string;
      })

      // **–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è (–∑–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω)**
      .addCase(resetPassword.pending, (state) => {
        state.isLoading = true;
        state.isError = false;
      })
      .addCase(resetPassword.fulfilled, (state) => {
        state.isLoading = false;
      })
      .addCase(resetPassword.rejected, (state, action) => {
        state.isLoading = false;
        state.isError = action.payload as string;
      })
      .addMatcher(isAnyOf(register.pending, logIn.pending), (state) => {
        state.isLoading = true;
      })
      .addMatcher(isAnyOf(register.rejected, logIn.rejected), (state, action: PayloadAction<unknown>) => {
        console.log("LOGIN ERROR:", action.payload); // –î–û–î–ê—é –õ–û–ì —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —á–∏ —á–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–º–∏–ª–∫–∞ –∑ unwrap()
        state.isLoading = false;
         state.isLoggedIn = false; // –û–ë–û–í'–Ø–ó–ö–û–í–û! –©–æ–± –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑—á–∏—Ç—É–≤–∞–ª–æ—Å—è –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ
        state.isError = typeof action.payload === "string" ? action.payload : "Unknown error";
      });
  },
});

export const { loginSuccess, setToken } = authSlice.actions;
export const authReducer = authSlice.reducer;
export default authSlice.reducer;

