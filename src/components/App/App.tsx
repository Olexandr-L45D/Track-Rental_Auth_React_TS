import {
  Routes,
  Route,
  useNavigate,
  Navigate,
  Outlet,
  useLocation,
} from "react-router-dom";
import { lazy, Suspense, useEffect } from "react";
const LoginPage = lazy(() => import("../../pages/LoginPage/LoginPage"));
const RegisterPage = lazy(
  () => import("../../pages/RegisterPage/RegisterPage")
);
const TruckFeatures = lazy(() => import("../TruckFeatures/TruckFeatures"));
const TruckReviews = lazy(() => import("../TruckReviews/TruckReviews"));
const HomePage = lazy(() => import("../../pages/HomePage/HomePage"));
const TruckPageFilters = lazy(
  () => import("../../pages/TruckPageFilters/TruckPageFilters")
);
const TruckDetalsPage = lazy(
  () => import("../../pages/TruckDetalsPage/TruckDetalsPage")
);
const SendEmailConfirmationPage = lazy(
  () =>
    import("../../pages/SendEmailConfirmationPage/SendEmailConfirmationPage")
);
const ResetPasswordPage = lazy(
  () => import("../../pages/ResetPasswordPage/ResetPasswordPage")
);
const NotFoundPage = lazy(() => import("../../pages/NotFoundPage"));
const GoogleRedirectHandler = lazy(
  () => import("../../pages/GoogleRedirectHandler")
);
const TruckPageImages = lazy(
  () => import("../../pages/TruckPageImages/TruckPageImages")
);

import { Layout } from "../Layout/Layout";
import { useDispatch, useSelector } from "react-redux";
import { AppThunkDispatch, RootState } from "../../redux/store";
import PrivateRoute from "../PrivateRoute";
import RestrictedRoute from "../RestrictedRoute";
import Loader from "../Loader/Loader";
import { refreshSessionUser, refreshUser } from "../../redux/auth/operations";

// –û–≥–æ–ª–æ—à—É—î–º–æ —Ç–∏–ø –¥–ª—è window, –¥–æ–¥–∞—é—á–∏ redirected —â–æ–± –¥–∞–ª—ñ –∑ –Ω–∏–º –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ —ñ –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—å —Å—Ç–∞–Ω –î–æ–¥–∞—é –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ–∞–π–ª—É, —â–æ–± TypeScript –∑–Ω–∞–≤, —â–æ –º–∏ –ø—Ä–∞—Ü—é—î–º–æ –∑ DOM.
/// <reference lib="dom" />
declare global {
  interface Window {
    redirected?: boolean;
  }
}

export default function App() {
  const dispatch: AppThunkDispatch = useDispatch();
  const navigate = useNavigate();
  const isLoggedIn = useSelector((state: RootState) => state.auth.isLoggedIn);
  const isRefreshing = useSelector(
    (state: RootState) => state.auth.isRefreshing
  );
  const user = useSelector((state: RootState) => state.auth.user);
  const accessToken = useSelector((state: RootState) => state.auth.accessToken);
  const location = useLocation();
  // const hasRedirected = useRef(false);
  // const [hasRedirected, setHasRedirected] = useState(false);

  // –∑–∞–ø–∏—Ç –Ω–∞ –¢–û–ö–ï–ù isRefreshing (—á–∏ –≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω?)
  useEffect(() => {
    dispatch(refreshUser());
  }, [dispatch]);

  return isRefreshing ? (
    <Loader />
  ) : (
    <Layout>
      <Suspense fallback={<Loader />}>
        <Routes>
          {/* –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ */}
          <Route path="/" element={<HomePage />} />
          <Route path="/gallery" element={<TruckPageImages />} />

          {/* –î–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ù–ï –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏—Ö */}
          <Route
            path="/register"
            element={
              <RestrictedRoute redirectTo="/catalog" component={RegisterPage} />
            }
          />
          <Route
            path="/login"
            element={
              <RestrictedRoute redirectTo="/catalog" component={LoginPage} />
            }
          />

          {/* –§–æ—Ä–º–∏ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è */}
          <Route
            path="/confirm-email/:token"
            element={
              <RestrictedRoute
                component={SendEmailConfirmationPage}
                redirectTo="/catalog"
              />
            }
          />

          <Route
            path="/reset-pwd"
            element={
              <RestrictedRoute
                redirectTo="/catalog"
                component={ResetPasswordPage}
              />
            }
          />

          {/* <Route
            path="/googleauth"
            element={
              <RestrictedRoute
                component={<GoogleRedirectHandler />}
                redirectTo="/home"
              />
            }
          /> */}
          <Route path="/confirm-oauth" element={<GoogleRedirectHandler />} />

          {/* <Route
            path="/confirm-oauth"
            element={
              <RestrictedRoute
                component={GoogleRedirectHandler}
                redirectTo="/catalog"
              />
            }
          /> */}

          {/* –ó–∞—Ö–∏—â–µ–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ */}
          <Route
            path="/catalog"
            element={
              <PrivateRoute redirectTo="/login" component={TruckPageFilters} />
            }
          />
          <Route
            path="/catalog/:id"
            element={
              <PrivateRoute redirectTo="/login" component={TruckDetalsPage} />
            }
          >
            <Route path="features" element={<TruckFeatures />} />
            <Route path="reviews" element={<TruckReviews />} />
          </Route>

          <Route path="*" element={<NotFoundPage />} />
        </Routes>
      </Suspense>
    </Layout>
  );
}

//   useEffect(() => {
//   console.log("üü¢ useEffect TRIGGERED (Token Check)");
//   console.log("üìå –ü–æ—Ç–æ—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç:", location.pathname);
//   console.log("üìå isLoggedIn:", isLoggedIn);
//   console.log("üìå accessToken:", accessToken);
//   console.log("‚ö†Ô∏è Already redirected:", window.redirected);
//   console.log("üì¶ First visit flag before check:", localStorage.getItem("firstVisit"));

//   if (window.redirected) {
//     console.log("üõë Skipping redirect, already redirected.");
//     return;
//   }

//   const isFirstVisit = !localStorage.getItem("firstVisit");

//   if (isFirstVisit) {
//     console.log("üî• First visit detected! Saving flag...");
//     localStorage.setItem("firstVisit", "true");

//     if (!isLoggedIn && !isRefreshing) {
//       console.log("‚è≥ Redirecting to /register...");
//       window.redirected = true;
//       navigate("/register", { replace: true });
//       return;
//     }
//   }

//   if (!isLoggedIn && !isRefreshing && location.pathname !== "/register" && location.pathname !== "/") {
//     console.log("üîÑ Redirecting to /login...");
//     window.redirected = true;
//     navigate("/login", { replace: true });
//     return;
//   }

//   if (isLoggedIn) {
//     console.log("üöÄ Redirecting to /catalog");
//     navigate("/catalog", { replace: true });
//     return;
//   }

// }, [isLoggedIn, isRefreshing, navigate, location.pathname]);

// useEffect(() => {
//   console.log("üü¢ useEffect TRIGGERED (Token Check)");
//   console.log("üìå –ü–æ—Ç–æ—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç:", location.pathname);
//   console.log("üìå isLoggedIn:", isLoggedIn);
//   console.log("üìå accessToken:", accessToken);
//   console.log("‚ö†Ô∏è Already redirected:", window.redirected);
//   console.log("üì¶ First visit flag before check:", localStorage.getItem("firstVisit"));

//   if (window.redirected) {
//     console.log("üõë Skipping redirect, already redirected.");
//     return;
//   }

//   const isFirstVisit = !localStorage.getItem("firstVisit");

//   if (isFirstVisit) {
//     console.log("üî• First visit detected! Saving flag...");
//     localStorage.setItem("firstVisit", "true");

//     if (!isLoggedIn && !isRefreshing) {
//       console.log("‚è≥ Redirecting to / (home)...");
//       window.redirected = true;
//       navigate("/", { replace: true });
//       return;
//     }
//   }

//   if (!isLoggedIn && !isRefreshing && location.pathname !== "/register" && location.pathname !== "/") {
//     console.log("üîÑ Redirecting to /login...");
//     window.redirected = true;
//     navigate("/login", { replace: true });
//     return;
//   }

//   if (isLoggedIn) {
//     console.log("üöÄ Redirecting to /catalog");
//     navigate("/catalog", { replace: true });
//     return;
//   }

// }, [isLoggedIn, isRefreshing, navigate, location.pathname]);

//   useEffect(() => {
//   console.log("üü¢ useEffect TRIGGERED (Token Check)");
//   console.log("üìå –ü–æ—Ç–æ—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç:", location.pathname);
//   console.log("üìå isLoggedIn:", isLoggedIn);
//   console.log("üìå accessToken:", accessToken);
//   console.log("‚ö†Ô∏è Already redirected:", window.redirected);
//   console.log("üì¶ First visit flag before check:", localStorage.getItem("firstVisit"));

//   if (window.redirected) {
//     console.log("üõë Skipping redirect, already redirected.");
//     return;
//   }

//   if (!localStorage.getItem("firstVisit")) {
//     console.log("üî• First visit detected! Saving flag...");
//     localStorage.setItem("firstVisit", "true");

//     if (!isLoggedIn && !isRefreshing) {
//       console.log("‚è≥ Redirecting to /register in 100ms...");
//       window.redirected = true;

//       setTimeout(() => {
//         console.log("üöÄ Now navigating to /register");
//         navigate("/register", { replace: true });
//       }, 100);

//       return;
//     }
//   }

//   if (!isLoggedIn && !isRefreshing && location.pathname !== "/register") {
//     console.log("üîÑ Checking redirect to /login...");
//     window.redirected = true;
//     navigate("/login", { replace: true });
//     return;
//   }

//   if (isLoggedIn && isRefreshing) {
//     console.log("üöÄ Redirecting to /catalog");
//     navigate("/catalog", { replace: true });
//     return;
//   }

// }, [isLoggedIn, isRefreshing, navigate, location.pathname]);

//  —Ü–µ–π —é–∑–µ—Ñ–µ–∫—Ç –∑ –∑–∞–ø–∏—Å—Å–æ–º –≤ –°–µ—ñ—é–°—Ç–æ—Ä–µ–¥–∂ sessionStorage.getItem("alreadyRedirected"));
//   useEffect(() => {
//   console.log("üü¢ useEffect TRIGGERED (Token Check)");
//   console.log("üìå –ü–æ—Ç–æ—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç:", location.pathname);
//   console.log("üìå isLoggedIn:", isLoggedIn);
//     console.log("üìå accessToken:", accessToken);
//    console.log("‚ö†Ô∏è Already redirected (sessionStorage):", sessionStorage.getItem("alreadyRedirected"));
//     console.log("üì¶ First visit flag before check:", localStorage.getItem("firstVisit"));

//     // üõë –Ø–∫—â–æ –º–∏ –≤–∂–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–ª–∏ –Ω–∞ /register, –±—ñ–ª—å—à–µ –Ω–µ —Ä–æ–±–∏–º–æ —Ä–µ–¥—ñ—Ä–µ–∫—Ç–∏
//   if (sessionStorage.getItem("alreadyRedirected")) {
//     console.log("üõë Skipping redirect, already redirected.");
//     return;
//   }

//   if (!localStorage.getItem("firstVisit")) {
//     console.log("üî• First visit detected! Saving flag...");
//     localStorage.setItem("firstVisit", "true");

//   if (!isLoggedIn && !isRefreshing) {
//       console.log("‚è≥ Redirecting to /register in 100ms...");
//       sessionStorage.setItem("alreadyRedirected", "true");

//       setTimeout(() => {
//         console.log("üöÄ Now navigating to /register");
//         navigate("/register", { replace: true });
//       }, 100);

//       return;
//     }
//   }

//   if (!isLoggedIn && !isRefreshing && location.pathname !== "/register") {
//     console.log("üîÑ Checking redirect to /login...");
//     sessionStorage.setItem("alreadyRedirected", "true");
//     navigate("/login", { replace: true });
//     return;
//   }

//   if (isLoggedIn && isRefreshing) {
//     console.log("üöÄ Redirecting to /catalog");
//     navigate("/catalog", { replace: true });
//     return;
//   }
// }, [accessToken, isLoggedIn, isRefreshing, dispatch, navigate, location.pathname]);

// useEffect(() => {
//   console.log("üü¢ useEffect TRIGGERED (Token Check)");
//   console.log("üìå –ü–æ—Ç–æ—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç:", location.pathname);
//   console.log("üìå isLoggedIn:", isLoggedIn);
//   console.log("üìå accessToken:", accessToken);

//   const savedToken = localStorage.getItem("jwt-token");
//   console.log("üì¶ Token from LocalStorage:", savedToken);
//   console.log("üì¶ First visit flag:", localStorage.getItem("firstVisit")); // üõ† –î–æ–¥–∞—î–º–æ –ª–æ–≥

//   if (savedToken && !accessToken) {
//     console.log("üì¶ Loaded token from LocalStorage:", savedToken);
//     dispatch(setToken({ accessToken: savedToken, user }));
//   }

//  // üü¢ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–µ—Ä—à–∏–π –≤—ñ–∑–∏—Ç (—è–∫—â–æ "firstVisit" —â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ)
//   if (!localStorage.getItem("firstVisit")) {
//     console.log("üî• First visit detected! Saving flag...");
//     localStorage.setItem("firstVisit", "true");

//     // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
//     if (!isLoggedIn && !isRefreshing) {
//       console.log("üöÄ Redirecting to /register (first visit)");
//       navigate("/register", { replace: true });
//       return;
//     }
//   }

//   // üîµ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π —ñ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –∑–∞–π—Ç–∏ –≤ –∑–∞–∫—Ä–∏—Ç–∏–π —Ä–æ–∑–¥—ñ–ª ‚Üí –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –ª–æ–≥—ñ–Ω
//   if (!isLoggedIn && !isRefreshing && location.pathname !== "/register") {
//     console.log("üöÄ Redirecting to /login");
//     navigate("/login", { replace: true });
//     return;
//   }
//       if (isLoggedIn && isRefreshing) {
//       console.log("üöÄ Redirecting to /catalog");
//       navigate("/catalog", { replace: true });
//     return;
//   }

// }, [accessToken, isLoggedIn, isRefreshing, dispatch, navigate, location.pathname]);

// –ü—Ä–æ–±—É–≤–∞ —Ç–∞–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –∞–ª–µ —á–∞—Ç –ø–∏—à–µ —â–æ –ø–æ–∫–∏ –Ω–µ –≤–∞—Ä—Ç–æ –¥–æ–¥–∞–≤ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –§–ï–†–°–¢ –≤—ñ–∑—ñ—Ç

/* –î–æ–¥–∞—é –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–∞—Ä—à—Ä—É—Ç(–π–æ–≥–æ —Ä–∞–Ω—ñ—à–µ –Ω–µ –±—É–ª–æ) –¥–ª—è –ù–ï –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–æ–≤–∞–Ω–æ–≥–æ –Æ–∑–µ—Ä–∞ */
// <Route path="/catalog" element={<PrivateRoute redirectTo="/register" component={() => <TruckPageFilters />} />} />

//   useEffect(() => {
//   console.log("üü¢ useEffect TRIGGERED (Token Check)");
//   console.log("üìå –ü–æ—Ç–æ—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç:", location.pathname);
//   console.log("üìå isLoggedIn:", isLoggedIn);
//   console.log("üìå accessToken:", accessToken);

//   const savedToken = localStorage.getItem("jwt-token");
//     console.log("üì¶ Token from LocalStorage:", savedToken);
//     if (savedToken && !accessToken) {
//     console.log("üì¶ Loaded token from LocalStorage:", savedToken);
//     dispatch(setToken({ accessToken: savedToken, user }));
//   }

//     if (!isLoggedIn && !isRefreshing) {
//       console.log("üöÄ Redirecting to login");
//       navigate("/login", { replace: true });
//     return;
//     }
//     if (isLoggedIn && isRefreshing) {
//       console.log("üöÄ Redirecting to login");
//       navigate("/catalog", { replace: true });
//     return;
//   }

// }, [accessToken, isLoggedIn, isRefreshing, dispatch, navigate, location.pathname]);

// —Ü–µ–π –≤–∞—Ä—ñ–∞–Ω—Ç –±–ª–æ–∫—É—î –ø–µ—Ä–µ—Ö—ñ–¥ –¥–∞–ª—ñ –ø–æ –ê–ô–î–Ü!!!
// üü¢ –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π, –∞–ª–µ —â–µ –Ω–µ –≤ –∫–∞—Ç–∞–ª–æ–∑—ñ ‚Äì –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ
// if (isLoggedIn && location.pathname !== "/catalog") {
//   console.log("üöÄ Redirecting to /catalog");
//   // setTimeout(() => navigate("/catalog", { replace: true }), 100);
//   navigate("/catalog", { replace: true });
// }

//   useEffect(() => {
//   console.log("üü¢ useEffect TRIGGERED (Token Check)");
//   console.log("üìå –ü–æ—Ç–æ—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç:", location.pathname);
//   console.log("üìå isLoggedIn:", isLoggedIn);
//   console.log("üìå accessToken:", accessToken);

//   const savedToken = localStorage.getItem("jwt-token");
//   console.log("üì¶ Token from LocalStorage:", savedToken);

//   if (!isLoggedIn) {
//     console.log("üö™ User logged out, skipping token restore.");
//     return;
//   }

//   if (savedToken && !accessToken) {
//     console.log("üì¶ Loaded token from LocalStorage:", savedToken);
//     dispatch(setToken({ accessToken: savedToken, user }));
//   }
// }, [accessToken, isLoggedIn, isRefreshing, dispatch, navigate, location.pathname]);

//   useEffect(() => {
//   console.log("üìå useEffect triggered!");
//   console.log("üîç isLoggedIn:", isLoggedIn);
//   console.log("üîç accessToken:", accessToken);
//   console.log("üîç isRefreshing:", isRefreshing);
//   console.log("üîç –ü–æ—Ç–æ—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç:", location.pathname);

//   // üî¥ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —é–∑–µ—Ä –Ω–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π —Ç–∞ –Ω–µ —Ä–µ—Ñ—Ä–µ—à–∏—Ç—å—Å—è
//   if (!isLoggedIn && !isRefreshing) {
//     if (location.pathname !== "/login") {
//       console.log("üöÄ Redirecting to login");
//       navigate("/login", { replace: true });
//     }
//     return;
//   }

//   // üü¢ –Ø–∫—â–æ —é–∑–µ—Ä –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π, –∞–ª–µ –Ω–µ –≤ –∫–∞—Ç–∞–ª–æ–∑—ñ ‚Äì –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ
//   if (isLoggedIn && !isRefreshing && location.pathname !== "/catalog") {
//     console.log("üöÄ Redirecting to catalog");
//     setTimeout(() => navigate("/catalog", { replace: true }), 100); // üëà –ó–∞—Ç—Ä–∏–º–∫–∞ –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Redux
//   }

// }, [isLoggedIn, isRefreshing, location.pathname, navigate]);

// useEffect(() => {

//   if (!isLoggedIn && location.pathname !== "/" && location.pathname !== "/register" && location.pathname !== "/login") {
//     console.log("üöÄ Redirecting to home page `/`");
//     navigate("/", { replace: true });
//     return;
//   }
//   // 2Ô∏è‚É£ –Ø–∫—â–æ —é–∑–µ—Ä –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π —ñ –Ω–µ —Ä–µ—Ñ—Ä–µ—à–∏—Ç—å—Å—è, –∞–ª–µ —â–µ –ù–ï –≤ –∫–∞—Ç–∞–ª–æ–∑—ñ ‚Üí –ø–µ—Ä–µ–∫–∏–¥–∞—î–º–æ –≤ –∫–∞—Ç–∞–ª–æ–≥ 12345Alex
//   if (isLoggedIn && !isRefreshing && location.pathname !== "/catalog") {
//     console.log("üöÄ User just logged in! Navigating to /catalog");
//     // ‚úÖ –î–∞—î–º–æ Redux —á–∞—Å –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ —Ä–µ–¥—ñ—Ä–µ–∫—Ç–æ–º
//     navigate("/catalog", { replace: true });
//   }

//   const savedToken = localStorage.getItem("jwt-token");

//   if (!isLoggedIn) {
//     console.log("üö™ User logged out, skipping token restore.");
//     return;
//   }
//   if (savedToken && !accessToken) {
//     console.log("üì¶ Loaded token from LocalStorage:", savedToken);
//     dispatch(setToken({ accessToken: savedToken, user }));
//   }

// return (
//   <div>
//     <ToastContainer limit={3} />
//     <SharedLayout>
//       <Suspense fallback={<Loader />}>
//         <Routes>
//           <Route path="/welcome" element={<WelcomePage />} />
//           <Route
//             index
//             element={
//               <RestrictedRoute
//                 redirectTo="/home"
//                 component={<WelcomePage />}
//               />
//             }
//           />
//           <Route
//             path="/signup"
//             element={
//               <RestrictedRoute component={<SignupPage />} redirectTo="/" />
//             }
//           />
//           <Route
//             path="/confirm-email"
//             element={
//               <RestrictedRoute
//                 component={<ConfirmEmailPage />}
//                 redirectTo="/home"
//               />
//             }
//           />

//           <Route
//             path="/signin"
//             element={
//               <RestrictedRoute
//                 component={<SigninPage />}
//                 redirectTo="/home"
//               />
//             }
//           />
//           <Route
//             path="/home"
//             element={
//               <PrivateRoute redirectTo="/signin" component={<HomePage />} />
//             }
//           />
//           <Route
//             path="/reset-pwd"
//             element={
//               <RestrictedRoute
//                 redirectTo="/home"
//                 component={<PasswordResetPage />}
//               />
//             }
//           />
//           <Route
//             path="/googleauth"
//             element={
//               <RestrictedRoute
//                 component={<GoogleRedirectHandler />}
//                 redirectTo="/home"
//               />
//             }
//           />

//           <Route path="*" element={<NotFoundPage />} />
//         </Routes>
//       </Suspense>
//     </SharedLayout>
//   </div>
// );
